{
  "name": "Simple Rest Client - Guia de Referência",
  "tagline": "Uma biblioteca para construção de aplicações clientes de RESTful Web Services.",
  "body": "## Introdução\r\nSimple Rest Client é um projeto de código aberto que visa a elaboração de uma biblioteca para auxílio a desenvolvedores na construção de aplicações cliente de Web Services. A biblioteca fornece interfaces e classes que buscam simplificar o envio de requisições HTTP à serviços disponibilizados por servidores de Web Services.\r\n\r\n## A interface RestClientInterface<T>\r\nA interface genérica RestClientInterface<T> é utilizada para declaração de um objeto de conexão com o Web Services. Vejamos como declarar a variável que servirá de cliente para o envio de métodos de requisição HTTP.\r\n\r\n**Exemplo:**\r\n\r\nPara exemplificar, criaremos uma referência a uma conexão com um Web Services de notícias acadêmicas. A classe dos objetos correspondentes às notícias acadêmicas é denominada Noticia.\r\n\r\n`RestClientInterface<Noticia> cliente;`\r\n\r\n## A classe RestClient<T>\r\n\r\nA classe genérica RestClient<T> irá implementar os comportamentos definidos na interface genérica RestClientInterface<T>. Inicialmente, invocaremos o método de classe denominado open() para obtenção de uma instância de RestClient, a qual permitirá o envio de requisições HTTP à aplicação de Web Services.\r\n\r\n**Exemplo:**\r\n\r\n`String uri = “http://localhost:8080/noticiaApp/servicos/noticias”;`\r\n`RequestContentType contentType = RequestContentType.JSON;`\r\n`RestClientInterface<Noticia> cliente;`\r\n`cliente = RestClient.open(uri, contentType);`\r\n\r\nA uri é um identificador do recurso do servidor de Web Services. A uri é composta de:\r\n\r\n* endereço do servidor: no exemplo estamos usando localhost para hospedar o servidor de Web Services. Portanto, identificamos o servidor na forma http://localhost:8080/\r\n* nome da aplicação: identifica o nome a aplicação de Web Services. No exemplo, o nome é noticiaApp.\r\n* Classe de configuração: o nome da classe controladora do Web Services. No exemplo, o nome é  servicos.\r\n* Nome da classe de Web Services: classe que implementa os recursos solicitados pelos clientes. No exemplo, o nome da classe é noticias.\r\n\r\nJá contentType é uma constante definida em uma enumeração Java, a qual identifica o tipo de conteúdo solicitado por uma requisição. No exemplo, está sendo enviada uma requisição cujo conteúdo gerado será no formato JSON (JavaScript Object Notation). \r\n\r\nO método open() é um método de classe (estático) definido na classe RestClient, o qual abrirá uma conexão com o servidor de Web Services. A conexão será retornada para o objeto denominado cliente.\r\n\r\nA seguir, veremos como enviar métodos de requisições do tipo POST, PUT, DELETE e GET a um Web Services. Note, que após o envio de um método de requisição, devemos fechar a conexão. Isso é realizado através do método close(), definido na interface da classe RestClient.\r\n\r\n**Exemplo:**\r\n\r\n`String uri = “http://localhost:8080/noticiaApp/servicos/noticias”;`\r\n`RequestContentType contentType = RequestContentType.JSON;`\r\n`RestClientInterface<Noticia> cliente;`\r\n`cliente = RestClient.open(uri, contentType);`\r\n\r\n`… //Aqui vai algum método de requisição que veremos a seguir.`\r\n\r\n`cliente.close();`\r\n\r\n## Requisições POST\r\nPara o envio de requisições do tipo POST, devemos utilizar o método específico definido na interface de RestClient. Após, a obtenção de uma conexão com o método open(), utilizamos o método post(Object o) para o envio do objeto que será persistido no banco de dados mantido pelo Web Services. Ou seja, utilizamos POST para requisições do tipo INSERT.\r\n\r\n**Exemplo:**\r\n\r\n`String uri = “http://localhost:8080/noticiaApp/servicos/noticias”;`\r\n`RequestContentType contentType = RequestContentType.JSON;`\r\n`RestClientInterface<Noticia> cliente;`\r\n`Noticia noticia = new Noticia(“Lançamento da versão 1.0”);`\r\n`cliente.post(noticia);`\r\n`cliente.close();`\r\n \r\nNo exemplo anterior, declaramos uma variável do tipo Notícia e instanciamos o objeto, criando uma nova notícia. A notícia será persistida por um serviço disponibilizado no Web Services noticias, o qual é requisitado através do método post(). Após o envio da requisição e seu processamento pelo Web Services, encerramos a comunicação da aplicação cliente com o servidor através do método close().\r\n\r\n## Requisições PUT\r\nUm método específico definido na interface da classe RestClient permite o envio de requições do tipo PUT. As requisições PUT são utilizadas para alteração de dados. Ou seja, usaremos requisições do tipo PUT para realizarmos operações UPDATE em tabelas do banco de dados mantido pela aplicação de Web Services.\r\n\r\nVejamos um exemplo de alteração de uma notícia previamente armazenada pelo nosso Web Services de notícias acadêmicas.\r\n\r\n**Exemplo:**\r\n\r\n`String uri = “http://localhost:8080/noticiaApp/servicos/noticias”;`\r\n`RequestContentType contentType = RequestContentType.JSON;`\r\n`RestClientInterface<Noticia> cliente;`\r\n`noticia.setNoticia(“Lançamento da versão 1.0 da biblioteca”);`\r\n`cliente.put(noticia);`\r\n`cliente.close();`\r\n\r\nApós a alteração da notícia, através do método setNoticia(String noticia). Usamos o método put(Object obj) para o envio da notícia ao Web Services de notícias acadêmicas.\r\n\r\n## Requisições DELETE\r\nAs requisições do tipo DELETE são utilizadas quando desejarmos excluir algum dado. Ou seja, utilizaremos este tipo de requisição quando desejarmos invocar um DELETE em tabelas do banco de dados mantido pelo Web Services.\r\n\r\nVejamos um exemplo de exclusão de uma notícia previamente armazenada pelo nosso Web Services de notícias acadêmicas.\r\n\r\n**Exemplo:**\r\n\r\n`String uri = “http://localhost:8080/noticiaApp/servicos/noticias”;`\r\n`RequestContentType contentType = RequestContentType.TEXT;`\r\n`RestClientInterface<Noticia> cliente;`\r\n`uri += \"deleteNoticia/\" + noticia.getId();`\r\n`cliente = RestClient.open(uri, RequestContentType.JSON);        `\r\n`cliente.delete();`\r\n`cliente.close();`\r\n\r\nNote que as requisições baseadas no método DELETE recebem um argumento na própria url. Neste exemplo, passamos como parâmetro o ID da notícia a ser excluída.\r\n\r\n## Requisições GET\r\nO método de requisição GET é utilizado quando desejamos obter uma lista de objetos do Web Services. Note que o GET está relacionado com o comando SELECT, visto que devemos utilizar quando enviamos uma consulta ao banco de dados mantidos pelo Web Services.\r\n\r\nSeguindo nosso exemplo, vejamos como carregar as notícias previamente armazenadas no banco de dados mantido pela aplicação no servidor.\r\n\r\n**Exemplo:**\r\n\r\n`String uri = “http://localhost:8080/noticiaApp/servicos/noticias”;`\r\n`RequestContentType contentType = RequestContentType.JSON;`\r\n`RestClientInterface<Noticia> cliente;`\r\n`List<Noticia> noticias;`\r\n`cliente = RestClient.open(uri + \"todas\", RequestContentType.JSON);`\r\n`cliente.setType(Noticia[].class);`\r\n`noticias = cliente.get();`\r\n`cliente.close();`\r\n\r\nVeja que a uri é constituída do caminho onde se encontra o Web Services mais o recurso solicitado pela aplicação cliente. Neste caso, a aplicação cliente enviará uma requisição solicitando “todas” as notícias encontradas no banco de dados do servidor.\r\n\r\nO método setType(Class[] class), definido na interface da classe RestClient, deve ser utilizado para definir o tipo de conjunto de objetos retornado em requisições GET. Neste exemplo, será retornado um conjunto de objetos do tipo Noticia.\r\n\r\nA lista de notícias retornada na requisição será guardada em noticias, a qual é uma variável do tipo List. Após realizada a requisição, fechamos a transação com o método close().\r\n\r\nTambém podemos usar o método GET para obter subconjuntos de objetos. Para isso, devemos enviar requisições com parâmetros que identificam valores que devem ser selecionados na cláusula WHERE de consultas SQL. Vejamos um exemplo:\r\n\r\n`String parametro = URLEncoder.encode(“23/03/2016, \"UTF-8\");`\r\n`String recurso = \"pordata/\" + parametro;`\r\n`cliente = RestClient.open(uri + recurso, RequestContentType.JSON);`\r\n`cliente.setType(Noticia[].class);`\r\n`noticias = cliente.get();`\r\n`cliente.close();`\r\n\r\nNeste exemplo, passamos a data codificada como parâmetro para o recurso “pordata/”. Dessa forma, o servidor irá processar a requisição parametrizada e devolver somente as notícias daquele dia.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}